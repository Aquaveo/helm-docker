#!/usr/bin/env python3
"""Purge a helm deployment and redeploy it."""

import argparse
import time
from subprocess import call, Popen, PIPE


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('name', type=str,
                        help='The name of the deployment to refresh.'
                        )
    parser.add_argument('chart', type=str,
                        help="The chart to deploy")
    parser.add_argument('-f', '--values-file', type=str,
                        help='The path to a yaml file to read values from.'
                        )
    parser.add_argument('-n', '--namespace', type=str, default="default",
                        help="The deployment's namespace."
                        )
    parser.add_argument('--no-deps', action='store_true',
                        help="Don't update dependencies."
                        )
    parser.add_argument('--max-pvc-checks', type=int, default=999,
                        help="Maximum number of times to check if all pvc's "
                             "were deleted"
                        )

    args = parser.parse_args()

    if not args.no_deps:
        if call(["helm", "dep", "up", args.chart]) != 0:
            exit()
    purge_command = ["helm", "uninstall", args.name]
    call(purge_command)
    attempts = 0
    while attempts < args.max_pvc_checks:
        attempts += 1
        p = Popen(["kubectl", "get", "pvc", "-n", args.namespace],
                  stdin=PIPE, stdout=PIPE, stderr=PIPE
                  )
        output, err = p.communicate()
        output = output.decode()
        rc = p.returncode
        if rc != 0:
            print(f"Unable to determine if deployment was deleted because "
                  f"kubectl returned '{rc}'. Proceeding anyway.")
            break
        if output == "":
            attempts = 0
            break
        print(f"Waiting for deployment to delete. Waiting on \n'{output}'")
        time.sleep(5)

    if attempts >= args.max_pvc_checks:
        print("Unable to deploy: PVC's did not delete in time")
        exit()
    print(f"Redeploying '{args.name}' into namespace '{args.namespace}' using "
          f"chart '{args.chart}'")
    command = ["helm", "install", args.name, args.chart]
    if args.namespace:
        command.extend(["--namespace", args.namespace])
    if args.values_file:
        command.extend(["-f", args.values_file])
    exit(call(command))
